#run kraken2 on all samples in a directory
import os
import argparse
import concurrent.futures
import subprocess
import shutil

parser = argparse.ArgumentParser(description='Read files in a folder')
parser.add_argument('--folder_path', type=str, required=True,
                    help='The path to the folder containing all sequence files (.txt suffix, but fasta format, as generated by InSilicoSCR: Generate 4-neighbors)')
parser.add_argument('-n', '--num_workers', type=int, default=10)
parser.add_argument('-d', '--kraken2_db', type=str, default="/hpc/projects/data.science/duo.peng/Cas13_design_for_virus/kraken2_db/kraken2_standard_db/")
args = parser.parse_args()



def main():
    file_list = get_file_list(args.folder_path)
    print(f"processing {len(file_list)} files...")

    #make output directory
    args.folder_path = args.folder_path.rstrip("/")
    outdir = f"{args.folder_path}_kraken2.out"
    if os.path.exists(outdir):
        shutil.rmtree(outdir)
    os.makedirs(outdir)

    #process each file in parallel
    with concurrent.futures.ProcessPoolExecutor(max_workers=args.num_workers) as executor:
        results = executor.map(run_karken, file_list)

    with open(f"{args.folder_path}.kraken2.retcode.out", 'w') as file:
        for result in results:
            file.write(f"{result}\n")

def run_karken(file_path):
    print(f"running kraken2 on {file_path}...")
    outdir = f"{args.folder_path}_kraken2.out"
    outfile = os.path.basename(file_path)
    outpath = os.path.join(outdir, f"{outfile}.kraken2.out")
    #run kraken2
    dbname=args.kraken2_db
    command = ["kraken2", "--db", dbname, "--threads", "1", "--output", f"{outpath}", file_path]
    print(command)
    completed = subprocess.run(command) # won't work with shell=True
    retcode = completed.returncode
    return retcode


def get_file_list(folder_path):
    """get a list of txt files in the folder
    Args:
        folder_path (_type_): path to the folder to be scanned
    Returns:
        list: a list of paths to txt files in the folder
    """
    file_list = []
    for file in os.listdir(folder_path):
        if file.endswith(".txt"):
            file_list.append(os.path.join(folder_path, file))
    return file_list

if __name__ == "__main__":
    main()